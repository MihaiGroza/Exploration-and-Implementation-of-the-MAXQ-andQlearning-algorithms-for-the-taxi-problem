}
decode <- function(i){
# the inverse of encode()
d <- i%%4 + 1
i <- i %/% 4
c <- i%%5 + 1
i <- i%/%5
b <- i%%5 + 1
i <- i%/%5
return(c(i-1,b,c,d))
}
encode(4,4,4,3)
decode(450)
#start from 0.
decode(374)
encode(2,4,4,3)
decode(174)
encode <- function(a, b, c, d){
# encode the set(a,b,c,d) where a,b,c can have values from 1 to 5 and d can have values
# from 1 to 4.
# then the encoded variable can have values from 1 to 500
return(4*(5*(5*(a-1)+(b-1))+(c-1))+d-1)
}
decode <- function(i){
# the inverse of encode()
d <- i%%4 + 1
i <- i %/% 4
c <- i%%5 + 1
i <- i%/%5
b <- i%%5 + 1
i <- i%/%5
return(rev(c(i-1,b,c,d)))
}
encode(2,4,4,3)
decode(174)
#start from 0.
encode <- function(a, b, c, d){
# encode the set(a,b,c,d) where a,b,c can have values from 1 to 5 and d can have values
# from 1 to 4.
# then the encoded variable can have values from 1 to 500
return(4*(5*(5*(a-1)+(b-1))+(c-1))+d-1)
}
decode <- function(i){
# the inverse of encode()
d <- i%%4 + 1
i <- i %/% 4
c <- i%%5 + 1
i <- i%/%5
b <- i%%5 + 1
i <- i%/%5
return(c(i-1,b,c,d))
}
encode(2,4,4,3)
decode(174)
#start from 0.
encode <- function(a, b, c, d){
# encode the set(a,b,c,d) where a,b,c can have values from 1 to 5 and d can have values
# from 1 to 4.
# then the encoded variable can have values from 1 to 500
return(4*(5*(5*a+b)+c)+d)
}
decode <- function(i){
# the inverse of encode()
d <- i%%4
i <- i %/% 4
c <- i%%5
i <- i%/%5
b <- i%%5
i <- i%/%5
return(c(i,b,c,d))
}
encode(4,4,4,3)
decode(499)
#start from 0.
encode(3,3,3,3)
decode(375)
loc.indx <- function(i){
# takes a number between 1 and 4 representing (R,G,Y,B) and returns
# the equivalent (row,col) location
if(i==1){return(c(1,1))
}else if(i==2){return(c(1,5))
}else if(i==3){return(c(5,1))
}else if(i==4){return(c(5,4))}
return(c(0,0)) # shouldn't reach here.
}
loc.indx(1)
loc.indx(2)
loc.indx(3)
5&1
5&&1
5==5&&1==1
5==5&1==1
5==5&1==2
5==5&&1==2
5==5||1==2
5==5|1==2
hitting.wallQ <- function(r,c,a){
# true if the action would result in hitting a wall
if( (a==1 && r==5) || (a==2 && r==1)){return(TRUE)
}else if (a==3){
if(c==5){return(TRUE)}
if(((c==1||c==3)&&(r==5||r==4))||(c==2&&(r==1||r==2))){return(TRUE)}
}else if(a==4){
if(c==1){return(TRUE)}
if(((c==2||c==4)&&(r==5||r==4))||(c==3&&(r==2||r==1))){return(TRUE)}
}
return(FALSE)
}
c(2,3)==c(2,3)
all(c(2,3)==c(2,3))
all(c(2,3)==c(2,1))
all(c(2,3)==c(3,2))
s=c(1,2,3,4)
c[1:2]
c[1]
s[1:2]
all(c(2,3)==s[1:2])
all(c(1,2)==s[1:2])
list(s,10)
loc.indx(5)
render <- function(state){
print("+---------+")
print("something in between")
print("+---------+")
}
render(0)
gym <- import('gym')
reticulate
gym <- import('gym')
library(reticulate)
gym <- import('gym')
env <- gym$make("Taxi-v3")$env
env$render()
#--------------------------------
render <- function(state){
out = "+---------+\n"
out = out + "something in between\n"
out= out+"+---------+"
print(out)
}
render(0)
"2" + "3"
c("3","3")
#--------------------------------
render <- function(state){
out = "+---------+\n"
out = paste(out, "something in between\n")
out= paste(out,"+---------+")
print(out)
}
render(0)
render <- function(state){
out = "+---------+"
out = paste(out, "something in between",sep ='\n')
out= paste(out,"+---------+")
print(out)
}
render(0)
render <- function(state){
out = "+---------+"
out = paste(out, "something in between",sep ='/n')
out= paste(out,"+---------+")
print(out)
}
render(0)
paste("2","3",sep=' ')
paste("2","3",sep='n')
paste("2","3",sep='\n')
paste("2","3",sep="\n")
paste("2","3",collapse="\n")
paste("2","3",sep="\n")
sprintf("22","444")
noquote(paste("22","22"))
noquote(paste0("22","22"))
noquote(paste0("22","22",sep='\n'))
noquote(paste("22","22",sep='\n'))
noquote(paste("22","22",sep='n'))
noquote(paste("22","22",sep='\t'))
noquote(paste("22","22",sep='           '))
write("222", stdout())
render <- function(state){
write("+---------+",stdout())
write("something in between",stdout())
write("+---------+",stdout())
}
render(0)
c="| : | : : |"
c[1]
render <- function(state){
write("+---------+",stdout())
write("something in between",stdout())
write("|R: | : :G|",stdout())
write("+---------+",stdout())
}
render(0)
c
c[[1]]
c[[1,]]
substr(c,2,3)
substr(c,2,2)
substr(c,2,2) = "#"
c
out <- c("|R: | : :G|",
"| : | : : |",
"| : : : : |",
"| | : | : |",
"|Y| : |B: |")
write(out, stdout())
render <- function(state){
out <- c("|R: | : :G|",
"| : | : : |",
"| : : : : |",
"| | : | : |",
"|Y| : |B: |")
write("+---------+",stdout())
write(out,stdout())
write("+---------+",stdout())
}
render(0)
render <- function(state){
out <- c("|R: | : :G|",
"| : | : : |",
"| : : : : |",
"| | : | : |",
"|Y| : |B: |")
write("+---------+",stdout())
write(out,stdout())
write("+---------+",stdout())
}
render(0)
render <- function(state){
out <- c("|R: | : :G|",
"| : | : : |",
"| : : : : |",
"| | : | : |",
"|Y| : |B: |")
write("+---------+",stdout())
write(out,stdout())
write("+---------+",stdout())
}
render(0)
render <- function(state){
out <- c("|R: | : :G|",
"| : | : : |",
"| : : : : |",
"| | : | : |",
"|Y| : |B: |")
write("+---------+",stdout())
write(out,stdout())
write("+---------+",stdout())
}
render(0)
render <- function(state){
out <- c("|R: | : :G|",
"| : | : : |",
"| : : : : |",
"| | : | : |",
"|Y| : |B: |")
write("+---------+",stdout())
write(out,stdout())
write("+---------+",stdout())
}
render(0)
render <- function(state){
out <- c("|R: | : :G|",
"| : | : : |",
"| : : : : |",
"| | : | : |",
"|Y| : |B: |")
write("+---------+",stdout())
write(out,stdout())
write("+---------+",stdout())
}
render(0)
render <- function(state){
out <- c("|R: | : :G|",
"| : | : : |",
"| : : : : |",
"| | : | : |",
"|Y| : |B: |")
write("+---------+",stdout())
write(out,stdout())
write("+---------+",stdout())
}
render(0)
render <- function(state){
out <- c("|R: | : :G|",
"| : | : : |",
"| : : : : |",
"| | : | : |",
"|Y| : |B: |")
write("+---------+",stdout())
write(out,stdout())
write("+---------+",stdout())
}
render(0)
render(0)
length(out[1])
length(out)
out
out[1]
render <- function(state){
out <- c("|R: | : :G|",
"| : | : : |",
"| : : : : |",
"| | : | : |",
"|Y| : |B: |")
substr(out[state[1]],2*state[2])='#'
write("+---------+",stdout())
write(out,stdout())
write("+---------+",stdout())
}
render(c(1,2,1,1))
render <- function(state){
out <- c("|R: | : :G|",
"| : | : : |",
"| : : : : |",
"| | : | : |",
"|Y| : |B: |")
substr(out[state[1]],2*state[2],2*state[2])='#'
write("+---------+",stdout())
write(out,stdout())
write("+---------+",stdout())
}
render(c(1,2,1,1))
render(c(1,3,1,1))
render(c(1,5,1,1))
render(c(1,6,1,1))
render(c(2,3,1,1))
render(c(2,2,1,1))
render(c(2,4,1,1))
render <- function(state){
out <- c("|R: | : :G|",
"| : | : : |",
"| : : : : |",
"| | : | : |",
"|Y| : |B: |")
substr(out[state[1]],2*state[2],2*state[2])=' '
write("+---------+",stdout())
write(out,stdout())
write("+---------+",stdout())
}
render(c(2,4,1,1))
install.packages("crayon")
library(crayon)
green(' ')
cat(green(' '))
cat(green(' 4'))
print('\033[32m \033[39m')
cat('\033[32m \033[39m')
write('\033[32m \033[39m',stdout())
write('\033[32m \033[39mw',stdout())
write('\033[32mw \033[39mw',stdout())
yellow()
yellow(2)
yellow(#)
#
()
yellow("#")
cat(yellow("#"))
cat(red("#"))
cat(red(substr(out[state[1]],2*state[2],2*state[2])))
state=c(2,4,1,1)
cat(red(substr(out[state[1]],2*state[2],2*state[2])))
render <- function(state){
out <- c("|R: | : :G|",
"| : | : : |",
"| : : : : |",
"| | : | : |",
"|Y| : |B: |")
substr(out[state[1]],2*state[2],2*state[2])=red('#')
write("+---------+",stdout())
write(out,stdout())
write("+---------+",stdout())
}
render(c(2,4,1,1))
render <- function(state){
out <- c("|R: | : :G|",
"| : | : : |",
"| : : : : |",
"| | : | : |",
"|Y| : |B: |")
substr(out[state[1]],2*state[2],2*state[2])=cat(red('#'))
write("+---------+",stdout())
write(out,stdout())
write("+---------+",stdout())
}
render(c(2,4,1,1))
render <- function(state){
out <- c("|R: | : :G|",
"| : | : : |",
"| : : : : |",
"| | : | : |",
"|Y| : |B: |")
substr(out[state[1]],2*state[2],2*state[2])='#'
write("+---------+",stdout())
write(out,stdout())
write("+---------+",stdout())
}
render(c(2,4,1,1))
render <- function(state){
out <- c("|R: | : :G|",
"| : | : : |",
"| : : : : |",
"| | : | : |",
"|Y| : |B: |")
substr(out[state[1]],2*state[2],2*state[2])='#'
if(state[3]!=5){
loc <- loc.indx(state[3])
out[loc[1]] = paste0(substr(out[loc[1]],1,2*loc[2]-1),
red(substr(out[loc[1]],2*loc[2],2*loc[2])),
substr(out[loc[1]],2*loc[2]+1,length(out[loc[1]])))
}
write("+---------+",stdout())
write(out,stdout())
write("+---------+",stdout())
}
render(c(2,4,1,1))
out[loc[1]] = paste0(substr(out[loc[1]],1,2*loc[2]-1),
red(substr(out[loc[1]],2*loc[2],2*loc[2])),
substr(out[loc[1]],2*loc[2]+1,length(out[loc[1]])))
}
loc <- loc.indx(state[3])
out[loc[1]] = paste0(substr(out[loc[1]],1,2*loc[2]-1),
red(substr(out[loc[1]],2*loc[2],2*loc[2])),
substr(out[loc[1]],2*loc[2]+1,length(out[loc[1]])))
out
cat(out)
cat(out[[1]])
cat(out[[2]])
substr(out[loc[1]],2*loc[2]+1,length(out[loc[1]]))
out[loc[1]]
out[loc[2]]
out[loc[3]]
out[2]
out[3]
out[loc[1]] = paste0(substr(out[loc[1]],1,2*loc[2]-1),
red(substr(out[loc[1]],2*loc[2],2*loc[2])),
substr(out[loc[1]],2*loc[2]+1,length(out[loc[2]])))
loc <- loc.indx(state[3])
out[loc[1]] = paste0(substr(out[loc[1]],1,2*loc[2]-1),
red(substr(out[loc[1]],2*loc[2],2*loc[2])),
substr(out[loc[1]],2*loc[2]+1,length(out[2])))
cat(loc[1])
cat(out[loc[1]])
write(out)
write(out,stdout())
out <- c("|R: | : :G|",
"| : | : : |",
"| : : : : |",
"| | : | : |",
"|Y| : |B: |")
out[loc[1]] = paste0(substr(out[loc[1]],1,2*loc[2]-1),
red(substr(out[loc[1]],2*loc[2],2*loc[2])),
substr(out[loc[1]],2*loc[2]+1,length(out[2])))
write(out,stdout())
out[loc[1]]
paste0("2","3","4")
c("2","3","4")
substr(out[loc[1]],2*loc[2]+1,length(out[2]))
out <- c("|R: | : :G|",
"| : | : : |",
"| : : : : |",
"| | : | : |",
"|Y| : |B: |")
substr(out[loc[1]],2*loc[2]+1,length(out[2]))
substr(out[loc[1]],1,length(out[2]))
substr(out[loc[1]],1,11)
out <- c("|R: | : :G|",
"| : | : : |",
"| : : : : |",
"| | : | : |",
"|Y| : |B: |")
substr(out[state[1]],2*state[2],2*state[2])='#'
if(state[3]!=5){
loc <- loc.indx(state[3])
out[loc[1]] = paste0(substr(out[loc[1]],1,2*loc[2]-1),
red(substr(out[loc[1]],2*loc[2],2*loc[2])),
substr(out[loc[1]],2*loc[2]+1,11))
}
write("+---------+",stdout())
write(out,stdout())
write("+---------+",stdout())
render <- function(state){
out <- c("|R: | : :G|",
"| : | : : |",
"| : : : : |",
"| | : | : |",
"|Y| : |B: |")
substr(out[state[1]],2*state[2],2*state[2])='#'
if(state[3]!=5){
loc <- loc.indx(state[3])
out[loc[1]] = paste0(substr(out[loc[1]],1,2*loc[2]-1),
red(substr(out[loc[1]],2*loc[2],2*loc[2])),
substr(out[loc[1]],2*loc[2]+1,11))
}
write("+---------+",stdout())
write(out,stdout())
write("+---------+",stdout())
}
render(c(2,4,1,1))
render(c(2,4,1,1))
render(c(2,4,2,1))
render(c(2,4,3,1))
render(c(2,4,4,1))
render(c(2,4,5,1))
render(c(2,4,4,1))
render(c(1,1,1,1))
render(c(1,2,1,1))
render(c(1,1,1,1))
render(c(1,2,1,1))
setwd("D:/concordia/Fall20/STAT497 Reinforcement Learning/Final project/taxi_map/taxi-problem-with-MAXQ-and-Qlearning-in-R")
